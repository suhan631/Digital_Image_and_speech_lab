Display following image operation in MATLAB/Python - i) Histogram image ii) Low pass filter mage iii) High pass image.

i)%---------------Histogram--------------------
clc;
clear all;
close all;
% Load an image
image = imread('fruit-2999796_2.jpg');

% Convert to grayscale if needed
gray_image = rgb2gray(image);

% Display histogram
figure;
imhist(gray_image);
title('Histogram of the Image');
ii) %---------------Low-Pass Filtered Imag-----------------
clc;
clear all;
close all;
% Load an image (replace 'fruit-2999796.jpg' with your image's filename)
image = imread('fruit-2999796.jpg');

% Define a low-pass filter (e.g., Gaussian filter)
filter_size = 5; % Adjust filter size as needed
sigma = 1; % Adjust sigma as needed
filter = fspecial('gaussian', filter_size, sigma);

% Apply the filter to the image
filtered_image = imfilter(image, filter, 'replicate');

% Display the original image and the filtered image side by side
subplot(1, 2, 1);
imshow(image);
title('Original Image');

subplot(1, 2, 2);
imshow(filtered_image);
title('Low-Pass Filtered Image');
iii)%---------------High-Pass Filtered Image-----------------
clc;
clear all;
close all;
% Load an image (replace 'fruit-2999796.jpg' with your image's filename)
image = imread('fruit-2999796.jpg');

% Define a high-pass filter (e.g., Laplacian filter)
filter = fspecial('laplacian', 0.2);

% Apply the filter to the image
filtered_image = imfilter(image, filter, 'replicate');

% Display the original image and the high-pass filtered image side by side
subplot(1, 2, 1);
imshow(image);
title('Original Image');

subplot(1, 2, 2);
imshow(filtered_image + 0.5); % Adding 0.5 for visualization
title('High-Pass Filtered Image');
  2.-Write a MATLAB/Python program to read rice.tif image, count number of rice and 
%display area (also specific range), major axis length, and perimeter

clc;
clear all;
close all;
% Read the image
image = imread('rice.png');

% Convert the image to binary using thresholding
threshold = graythresh(image);
binaryImage = imbinarize(image, threshold);

% Label connected components
labeledImage = bwlabel(binaryImage);

% Measure properties of rice grains
properties = regionprops(labeledImage, 'Area', 'MajorAxisLength', 'Perimeter');

% Filter rice grains based on specific area range
minArea = 100;
maxArea = 1500;
filteredProperties = properties([properties.Area] >= minArea & [properties.Area] <= maxArea);

% Display results
fprintf('Total number of rice grains: %d\n', numel(filteredProperties));
for i = 1:numel(filteredProperties)
    fprintf('Rice grain %d:\n', i);
    fprintf('   Area: %.2f pixels\n', filteredProperties(i).Area);
    fprintf('   Major Axis Length: %.2f pixels\n', filteredProperties(i).MajorAxisLength);
    fprintf('   Perimeter: %.2f pixels\n', filteredProperties(i).Perimeter);
end

% Display the labeled image
imshow(label2rgb(labeledImage));
title('Labeled Rice Grains');








3. write a MATLAB/Python program to read an image and perform convolution 
with 3X3 mask.
clc;
clear all;
close all;
% Load the image
image = imread('fruit-2999796_1.jpg');
image = rgb2gray(image); % Convert to grayscale if needed

% Define the 3x3 mask
mask = [1, 0, -1; 2, 0, -2; 1, 0, -1];

% Perform convolution using built-in function
convolved_image = conv2(double(image), mask, 'same');

% Display the original and convolved images
subplot(1, 2, 1), 
imshow(image),
 title('Original Image');
subplot(1, 2, 2),
 imshow(convolved_image, []),
 title('Convolved Image');
4.write a MATLAB/Python program to read an image and perform Lapliciant 
filter mask.
clc;
clear all;
close all;
% Load the image
image = imread('fruit-2999796_1.jpg');
image = rgb2gray(image); % Convert to grayscale if needed

% Define the Laplacian filter mask
laplacian_mask = [0, 1, 0; 1, -4, 1; 0, 1, 0];

% Apply convolution using built-in function
filtered_image = conv2(double(image),
 laplacian_mask, 'same');

% Display the original and filtered images
subplot(1, 2, 1), 
imshow(image), 
title('Original Image');
subplot(1, 2, 2),
 imshow(filtered_image, []), 
title('Filtered Image (Laplacian)');
5..write a MATLAB/Python program to identify horizontal, vertical lines from an 
image

clc;
clear all;
close all;
% Load the image
image = imread('fruit-2999796_1.jpg');
gray_image = rgb2gray(image);

% Apply edge detection using the Sobel operator
edge_horizontal = edge(gray_image, 'Sobel', 'horizontal');
edge_vertical = edge(gray_image, 'Sobel', 'vertical');

% Display the original image and detected edges
subplot(1, 3, 1), imshow(image), title('Original Image');
subplot(1, 3, 2), imshow(edge_horizontal), title('Horizontal Edges');
subplot(1, 3, 3), imshow(edge_vertical), title('Vertical Edges');

6.write a MATLAB/Python program to Character Segment of an image.
clc;
clear all;
close all;
% Load the image
image = imread('Untitled2_2.jpeg');
gray_image = rgb2gray(image);

% Apply binary thresholding to segment characters
threshold = graythresh(gray_image);
binary_image = imbinarize(gray_image, threshold);

% Perform connected component analysis
cc = bwconncomp(binary_image);
num_objects = cc.NumObjects;
labeled_image = labelmatrix(cc);

% Display original image, binary thresholded image, and labeled image
subplot(1, 3, 1), imshow(image), title('Original Image');
subplot(1, 3, 2), imshow(binary_image), title('Binary Thresholded Image');
subplot(1, 3, 3), imshow(label2rgb(labeled_image)), title('Segmented Characters');


7..
% For the given image perform edge detection using different operators and compare the 
%results.

% Read the image
image = imread('LINE4_1.JPG'); % Change to your image filename

% Convert the image to grayscale if it's in color
if size(image, 3) == 3
    grayImage = rgb2gray(image);
else
    grayImage = image;
end

% Apply edge detection using different operators
sobelEdges = edge(grayImage, 'sobel');
prewittEdges = edge(grayImage, 'prewitt');
robertsEdges = edge(grayImage, 'roberts');
cannyEdges = edge(grayImage, 'canny');

% Display the original image and the edge detection results side by side
subplot(2, 2, 1);
imshow(grayImage);
title('Original Image');

subplot(2, 2, 2);
imshow(sobelEdges);
title('Sobel Edge Detection');

subplot(2, 2, 3);
imshow(prewittEdges);
title('Prewitt Edge Detection');

subplot(2, 2, 4);
imshow(robertsEdges);
title('Roberts Edge Detection');

figure;

subplot(1, 2, 1);
imshow(grayImage);
title('Original Image');

subplot(1, 2, 2);
imshow(cannyEdges);
title('Canny Edge Detection');

colormap gray;

8.
%Write a MATLAB/Python program to read coins.png, leveling all coins and display area 
%of all coins.

% Read the image
clc;
close all;
clear all;

image = imread('2.png');

% Apply Otsu's thresholding to segment the coins
threshold = graythresh(image);
binaryImage = imbinarize(image, threshold);

% Label connected components
labeledImage = bwlabel(binaryImage);

% Measure properties of coins
properties = regionprops(labeledImage, 'Area');

% Display results
fprintf('Total number of coins: %d\n', numel(properties));
for i = 1:numel(properties)
    fprintf('Coin %d:\n', i);
    fprintf('   Area: %.2f pixels\n', properties(i).Area);
end

% Display the labeled image
imshow(label2rgb(labeledImage));
title('Segmented Coins');

#9.. display following image operation in MATLAB/Python - i) Threshold image 
ii) Power enhance contract image iii) High pass image.

clc;
clear all;
close all;
% Load the image
image = imread('Untitled2_2.jpeg');
gray_image = rgb2gray(image);

% Apply binary thresholding to segment characters
threshold = graythresh(gray_image);
binary_image = imbinarize(gray_image, threshold);

% Perform connected component analysis
cc = bwconncomp(binary_image);
num_objects = cc.NumObjects;
labeled_image = labelmatrix(cc);

% Display original image, binary thresholded image, and labeled image
subplot(1, 3, 1), imshow(image), title('Original Image');
subplot(1, 3, 2), imshow(binary_image), title('Binary Thresholded Image');
subplot(1, 3, 3), imshow(label2rgb(labeled_image)), title('Segmented Characters');





10.. %. Perform image enhancement, smoothing and sharpening, in spatial domain using 
%different spatial filters and compare the performances

% Load the image
inputImage = imread('Untitled2_2.jpeg');

% Convert the image to grayscale if it's not already
grayImage = rgb2gray(inputImage);

% Display the original image
subplot(2, 3, 1);
imshow(grayImage);
title('Original Image');

% Image enhancement using histogram equalization
enhancedImage = histeq(grayImage);
subplot(2, 3, 2);
imshow(enhancedImage);
title('Enhanced Image (Histogram Equalization)');

% Smoothing using Gaussian filter
gaussianFilter = fspecial('gaussian', [5 5], 1);
smoothedImage = imfilter(grayImage, gaussianFilter, 'replicate');
subplot(2, 3, 3);
imshow(smoothedImage);
title('Smoothed Image (Gaussian Filter)');

% Sharpening using Laplacian filter
laplacianFilter = fspecial('laplacian', 0);
sharpenedImage = imfilter(grayImage, laplacianFilter, 'replicate');
subplot(2, 3, 4);
imshow(sharpenedImage);
title('Sharpened Image (Laplacian Filter)');

% Sharpening using Unsharp Masking
blurredImage = imfilter(grayImage, gaussianFilter, 'replicate');
unsharpMask = grayImage - blurredImage;
sharpenedImage2 = grayImage + unsharpMask;
subplot(2, 3, 5);
imshow(sharpenedImage2);
title('Sharpened Image (Unsharp Masking)');

% Display comparisons
subplot(2, 3, 6);
imshow(grayImage);
hold on;
h = text(size(grayImage, 2) / 2, 10, 'Original Image', 'Color', 'w', 'HorizontalAlignment', 'center');
set(h, 'FontSize', 10);
h = text(size(grayImage, 2) / 2, size(grayImage, 1) - 10, 'Different Image Enhancements', 'Color', 'w', 'HorizontalAlignment', 'center');
set(h, 'FontSize', 10);
hold off;

% Adjust the figure layout
set(gcf, 'Position', get(0, 'Screensize'));
12. write a MATLAB/Python program to separation of voiced/un-voiced/silence 
regions from a speech signal.




